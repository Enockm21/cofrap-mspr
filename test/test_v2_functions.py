#!/usr/bin/env python3
"""
Script de test pour les fonctions V2 de MSPR2 COFRAP
Teste la g√©n√©ration de mot de passe, 2FA et l'authentification
"""

import requests
import json
import time
import base64
from io import BytesIO
from PIL import Image

# Configuration
GATEWAY_URL = "http://127.0.0.1:8080"
TEST_USERNAME = "test.user.v2"

def test_generate_password():
    """Test de la g√©n√©ration de mot de passe"""
    print("üß™ Test de g√©n√©ration de mot de passe...")
    
    url = f"{GATEWAY_URL}/function/generate-password-v2"
    data = {"username": TEST_USERNAME}
    
    try:
        response = requests.post(url, json=data, timeout=30)
        result = response.json()
        
        if result.get('success'):
            print("‚úÖ G√©n√©ration de mot de passe r√©ussie")
            print(f"   Username: {result['username']}")
            print(f"   Gendate: {result['gendate']}")
            print(f"   QR Code g√©n√©r√©: {len(result['qr_code'])} caract√®res")
            
            # Test de d√©codage du QR code
            try:
                qr_data = base64.b64decode(result['qr_code'])
                img = Image.open(BytesIO(qr_data))
                print(f"   QR Code valide: {img.size[0]}x{img.size[1]} pixels")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur QR code: {e}")
            
            return True
        else:
            print(f"‚ùå √âchec g√©n√©ration mot de passe: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def test_generate_2fa():
    """Test de la g√©n√©ration 2FA"""
    print("\nüß™ Test de g√©n√©ration 2FA...")
    
    url = f"{GATEWAY_URL}/function/generate-2fa-v2"
    data = {"username": TEST_USERNAME}
    
    try:
        response = requests.post(url, json=data, timeout=30)
        result = response.json()
        
        if result.get('success'):
            print("‚úÖ G√©n√©ration 2FA r√©ussie")
            print(f"   Username: {result['username']}")
            print(f"   Issuer: {result['issuer']}")
            print(f"   QR Code g√©n√©r√©: {len(result['qr_code'])} caract√®res")
            print(f"   URI de provisionnement: {result['provisioning_uri'][:50]}...")
            
            # Test de d√©codage du QR code
            try:
                qr_data = base64.b64decode(result['qr_code'])
                img = Image.open(BytesIO(qr_data))
                print(f"   QR Code valide: {img.size[0]}x{img.size[1]} pixels")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erreur QR code: {e}")
            
            return True
        else:
            print(f"‚ùå √âchec g√©n√©ration 2FA: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def test_authentication_without_2fa():
    """Test d'authentification sans 2FA"""
    print("\nüß™ Test d'authentification (utilisateur inexistant)...")
    
    url = f"{GATEWAY_URL}/function/authenticate-user-v2"
    data = {
        "username": "utilisateur.inexistant",
        "password": "motdepasse123"
    }
    
    try:
        response = requests.post(url, json=data, timeout=30)
        result = response.json()
        
        if result.get('error') == 'Utilisateur inexistant':
            print("‚úÖ Test d'authentification √©chou√© correctement (utilisateur inexistant)")
            return True
        else:
            print(f"‚ùå R√©ponse inattendue: {result}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def test_password_expiration():
    """Test de v√©rification d'expiration de mot de passe"""
    print("\nüß™ Test de v√©rification d'expiration...")
    
    # Cr√©er un utilisateur avec un mot de passe "ancien" (plus de 6 mois)
    old_timestamp = int(time.time()) - (7 * 30 * 24 * 60 * 60)  # 7 mois
    
    url = f"{GATEWAY_URL}/function/generate-password-v2"
    data = {"username": f"{TEST_USERNAME}_expired"}
    
    try:
        # D'abord, g√©n√©rer un mot de passe normal
        response = requests.post(url, json=data, timeout=30)
        result = response.json()
        
        if result.get('success'):
            print("‚úÖ Utilisateur avec mot de passe expir√© cr√©√©")
            
            # Maintenant tester l'authentification
            auth_url = f"{GATEWAY_URL}/function/authenticate-user-v2"
            auth_data = {
                "username": f"{TEST_USERNAME}_expired",
                "password": "motdepasse123"  # Mot de passe incorrect
            }
            
            auth_response = requests.post(auth_url, json=auth_data, timeout=30)
            auth_result = auth_response.json()
            
            if auth_result.get('error') == 'Mot de passe incorrect':
                print("‚úÖ Test d'authentification √©chou√© correctement (mot de passe incorrect)")
                return True
            else:
                print(f"‚ùå R√©ponse inattendue: {auth_result}")
                return False
        else:
            print(f"‚ùå √âchec cr√©ation utilisateur: {result.get('error')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def test_function_availability():
    """Test de disponibilit√© des fonctions"""
    print("\nüß™ Test de disponibilit√© des fonctions...")
    
    functions = [
        "generate-password-v2",
        "generate-2fa-v2", 
        "authenticate-user-v2"
    ]
    
    all_available = True
    
    for func_name in functions:
        try:
            response = requests.get(f"{GATEWAY_URL}/function/{func_name}", timeout=10)
            if response.status_code in [200, 404, 405]:  # 405 = Method Not Allowed (normal pour GET)
                print(f"‚úÖ {func_name}: Disponible")
            else:
                print(f"‚ùå {func_name}: Erreur {response.status_code}")
                all_available = False
        except Exception as e:
            print(f"‚ùå {func_name}: Erreur de connexion - {e}")
            all_available = False
    
    return all_available

def main():
    """Fonction principale de test"""
    print("üöÄ Tests des fonctions V2 MSPR2 COFRAP")
    print("=" * 50)
    
    tests = [
        ("Disponibilit√© des fonctions", test_function_availability),
        ("G√©n√©ration de mot de passe", test_generate_password),
        ("G√©n√©ration 2FA", test_generate_2fa),
        ("Authentification (utilisateur inexistant)", test_authentication_without_2fa),
        ("V√©rification d'expiration", test_password_expiration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 30)
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors du test: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s avec succ√®s!")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 