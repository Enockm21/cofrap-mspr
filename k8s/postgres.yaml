apiVersion: v1
kind: Namespace
metadata:
  name: mspr2-cofrap
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: mspr2-cofrap
type: Opaque
data:
  postgres-password: cGFzc3dvcmQ=  # "password" en base64
  postgres-user: cG9zdGdyZXM=      # "postgres" en base64
  postgres-db: bXNwcjJfY29mcmFw    # "mspr2_cofrap" en base64
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: mspr2-cofrap
data:
  init.sql: |
    -- Création de la base de données
    CREATE DATABASE mspr2_cofrap;
    \c mspr2_cofrap;
    
    -- Table des utilisateurs
    CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(50) UNIQUE NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_login TIMESTAMP
    );
    
    -- Table de l'historique des mots de passe
    CREATE TABLE password_history (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        password_hash VARCHAR(255) NOT NULL,
        salt VARCHAR(32) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Table de planification de rotation des mots de passe
    CREATE TABLE password_rotation_schedule (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE UNIQUE,
        rotation_date TIMESTAMP NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Table d'authentification à deux facteurs
    CREATE TABLE two_factor_auth (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE UNIQUE,
        secret_key VARCHAR(32) NOT NULL,
        user_email VARCHAR(100) NOT NULL,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Table des codes de récupération
    CREATE TABLE recovery_codes (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        code VARCHAR(8) NOT NULL,
        used BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        used_at TIMESTAMP
    );
    
    -- Table des logs de connexion
    CREATE TABLE login_logs (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE SET NULL,
        username VARCHAR(50),
        status VARCHAR(20) NOT NULL,
        reason TEXT,
        ip_address VARCHAR(45),
        user_agent TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Index pour optimiser les performances
    CREATE INDEX idx_users_username ON users(username);
    CREATE INDEX idx_users_email ON users(email);
    CREATE INDEX idx_password_history_user_id ON password_history(user_id);
    CREATE INDEX idx_two_factor_auth_user_id ON two_factor_auth(user_id);
    CREATE INDEX idx_recovery_codes_user_id ON recovery_codes(user_id);
    CREATE INDEX idx_login_logs_user_id ON login_logs(user_id);
    CREATE INDEX idx_login_logs_created_at ON login_logs(created_at);
    
    -- Insertion d'un utilisateur de test
    INSERT INTO users (username, email) VALUES ('admin', 'admin@mspr2-cofrap.local');
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: mspr2-cofrap
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-password
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-user
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: postgres-db
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-init
        configMap:
          name: postgres-init
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: mspr2-cofrap
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: mspr2-cofrap
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP 